{"version":3,"sources":["ui/Nav.tsx","ui/TopNav.tsx","ui/BottomNav.tsx","helperFunctions/Choices.ts","helperFunctions/GameInfo.ts","components/rock.svg","components/paper.svg","components/scissors.svg","helperFunctions/Endpoint.ts","helperFunctions/SocketIO.ts","components/Game.tsx","ui/CreateOrJoinGameUI.tsx","components/CreateOrJoinGame.tsx","components/Friend.tsx","components/Stranger.tsx","components/PlayOnline.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Nav","activeClassName","className","to","optionsArr","key","text","value","TopNav","props","children","nav","selectDiv","options","i","length","push","ref","style","padding","name","defaultValue","BottomNav","readable","order","choices","rock","paper","scissors","AIinfo","code","info","friendInfo","strangerInfo","Endpoint","FriendEndpoint","StrangerEndpoint","friendSocket","io","strangerSocket","forceNew","isMessageShown","yourChoice","opponentChoice","requestMessage","answerMessage","typeOfRequest","maxScore","prevMaxScore","acceptedMaxScore","Game","useParams","buttonY","useRef","buttonO","images","messageInfo","newGameBtn","checkPlayingInfo","choice","getSelectValue","connectSocket","socket","disconnectSocket","useState","lineHeight","setLineHeight","yourScore","setYourScore","opponentScore","setOpponentScore","showRequestMessage","setShowRequestMessage","showAnswerMessage","setShowAnswerMessage","redirect","setRedirect","yourScoreRef","opponentScoreRef","current","container","margin","playingInfo","currentSocket","currentSocketRef","messageInfoChildNodes","contentChildNodes","header","p","redirectLink","redirectLinkRef","isAI","initMessageParams","childNodes","restoreShowMessage","textContent","document","createElement","setAttribute","replaceWith","map","image","classList","remove","handleShowAnswer","answerTimer","clearTimeout","window","setTimeout","newGame","isBtnPressed","emit","showMessage","playerChoice","headerMessage","pMessage","score","winner","messageTimer","toString","toLocaleLowerCase","chooseWinner","playerOneChoice","playerTwoChoice","newScore","parseInt","checkForChoices","eventNames","acceptRequest","rejectRequest","on","oChoice","oMaxScore","eventName","off","choiceNo","add","CPUChoice","Math","floor","random","select","disabled","addEventListener","e","target","useEffect","buttonYHeight","clientHeight","getAttribute","Container","marginTop","marginBottom","Row","Col","lg","md","sm","xl","xs","paddingTop","type","aria-hidden","textAlign","maxWidth","element","src","alt","data-choice","color","fontWeight","onClick","Message","size","Modal","show","animation","backdrop","keyboard","Header","Title","Body","Footer","Button","variant","enterGameCode","gameCodeI","enterGameB","createJoinGame","errorMessageCodeP","placeholder","maxLength","minLength","joinGame","selectFilter","paddingLeft","loadingTableRow","colSpan","serverErrorTableRow","noAvailableGamesTableRow","FRIEND_LINK","STRANGER_LINK","friendStrangerLink","gameCode","isComponentMounted","CreateOrJoinGame","playingInfoRef","gameNameI","createGameB","errorMessageP","selectMaxScore","filterValue","filteredItemsNumber","isPlayingInfoEqualFriendInfo","strangerSocketRef","friendSocketRef","isLoading","setIsLoading","serverError","setServerError","availableGames","setAvailableGames","roomsArr","setRoomsArr","availableGamesRef","roomsArrRef","arrRef","nameInput","buttonB","errorParagraph","parentElement","nameNoSpace","replace","substr","btoa","slice","connected","rooms","newRoomArr","availableGamesTableRow","room","idx","split","joinGameOnClick","paddingBottom","Friend","Stranger","errorTableRow","PlayOnline","codeRef","refInput","error","setError","startGame","setStartGame","showCopyToClipboard","setShowCopyToClipboard","showYourOpponentLeft","setShowYourOpponentLeft","checkCodeAndConnectToSocket","updateState","isLoading_","error_","serverError_","startGame_","showCopyToClipboard_","showYourOpponentLeft_","doesRoomExists","isDisconnectedOrError","connectToAllSockets","validCode","copyToClipBoard","setSelectionRange","execCommand","waitForPlayer","readOnly","playerLeft","playOnlineUI","codeString","debounce","callback","time","debounceTimer","App","topNav","bottomNav","setMargin","topBottomHeight","topNavHeight","removeEventListener","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ac5b8bc0.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n  return (\r\n    <>\r\n      <NavLink\r\n        activeClassName=\"active\"\r\n        className=\"item\"\r\n        to=\"/play-with-friend\"\r\n      >\r\n        Play With Friend\r\n      </NavLink>\r\n\r\n      <NavLink\r\n        activeClassName=\"active\"\r\n        className=\"item\"\r\n        to=\"/play-with-stranger\"\r\n      >\r\n        Play With Stranger\r\n      </NavLink>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import { NavLink } from 'react-router-dom';\r\nimport { NavProps } from '../helperFunctions/Props';\r\nimport Nav from './Nav';\r\nimport './TopNav.css';\r\n\r\nconst optionsArr = [\r\n  { key: '3', text: '3', value: '3' },\r\n  { key: '5', text: '5', value: '5' },\r\n];\r\n\r\nfunction TopNav(props: NavProps) {\r\n  const { children } = props;\r\n  const { nav, selectDiv } = children;\r\n\r\n  const options = [];\r\n\r\n  for (let i = 0; i < optionsArr.length; i += 1) {\r\n    options.push(\r\n      <option key={optionsArr[i].key} value={optionsArr[i].value}>\r\n        {optionsArr[i].text}\r\n      </option>,\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"ui menu top fixed nav\" ref={nav}>\r\n      <NavLink\r\n        activeClassName=\"active\"\r\n        className=\"header item\"\r\n        to=\"/\"\r\n      >\r\n        Rock Paper Scissors\r\n      </NavLink>\r\n\r\n      <span className=\"show-for-large\">\r\n        <Nav />\r\n      </span>\r\n\r\n      <div className=\"item\" ref={selectDiv}>\r\n        Max Score\r\n        <select\r\n          style={{ padding: '5px 5px' }}\r\n          name=\"max_score\"\r\n          className=\"ui selection fluid dropdown\"\r\n          defaultValue=\"3\"\r\n        >\r\n          {options}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopNav;\r\n","import { NavProps } from '../helperFunctions/Props';\r\nimport Nav from './Nav';\r\n\r\nfunction BottomNav(props: NavProps) {\r\n  const { children } = props;\r\n  const { nav } = children;\r\n\r\n  return (\r\n    <div className=\"ui bottom fixed two item menu show-for-medium nav\" ref={nav}>\r\n      <Nav />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BottomNav;\r\n","const choices = {\r\n  rock: 0,\r\n  paper: 1,\r\n  scissors: 2,\r\n};\r\n\r\nexport const readable = ['Rock', 'Paper', 'Scissors'];\r\n\r\n/**\r\n  * 0 -> rock, 1 -> paper, 2 -> scissors\r\n  * 0 is beaten by 1\r\n  * 1 is beaten by 2\r\n  * 2 is beaten by 0\r\n  */\r\nexport const order = [0, 1, 2, 0];\r\n\r\nexport default choices;\r\n","interface GameType {\r\n  code: number;\r\n  info: string;\r\n}\r\n\r\nexport const AIinfo: GameType = {\r\n  code: 0,\r\n  info: 'Artificial intelligence (AI)',\r\n};\r\n\r\nexport const friendInfo: GameType = {\r\n  code: 1,\r\n  info: 'a Friend',\r\n};\r\n\r\nexport const strangerInfo: GameType = {\r\n  code: 2,\r\n  info: 'a Random Stranger',\r\n};\r\n\r\nexport default GameType;\r\n","export default __webpack_public_path__ + \"static/media/rock.b760d847.svg\";","export default __webpack_public_path__ + \"static/media/paper.695b6c2a.svg\";","export default __webpack_public_path__ + \"static/media/scissors.75818e9e.svg\";","// const Endpoint = 'http://localhost:4000';\r\nconst Endpoint = 'https://rock-paper-scissors-server-40.herokuapp.com';\r\n\r\nexport const FriendEndpoint = `${Endpoint}/v1/play-with-friend`;\r\nexport const StrangerEndpoint = `${Endpoint}/v1/play-with-stranger`;\r\n","import { io } from 'socket.io-client';\r\nimport { FriendEndpoint, StrangerEndpoint } from './Endpoint';\r\n\r\nexport const friendSocket = io(FriendEndpoint);\r\nexport const strangerSocket = io(StrangerEndpoint, { forceNew: true });\r\n\r\nexport const disconnectSocket = () => {\r\n  friendSocket.disconnect();\r\n  strangerSocket.disconnect();\r\n};\r\n","import { useRef, useEffect, useState } from 'react';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport {\r\n  Container, Row, Col, Modal, Button,\r\n} from 'react-bootstrap';\r\nimport { Message } from 'semantic-ui-react';\r\nimport { ContainerProps } from '../helperFunctions/Props';\r\nimport choices, { order, readable } from '../helperFunctions/Choices';\r\nimport { AIinfo, friendInfo } from '../helperFunctions/GameInfo';\r\nimport './Game.css';\r\nimport rock from './rock.svg';\r\nimport paper from './paper.svg';\r\nimport scissors from './scissors.svg';\r\nimport { friendSocket, strangerSocket } from '../helperFunctions/SocketIO';\r\n\r\n/**\r\n * Y -> your score\r\n * O -> opponent score\r\n *\r\n */\r\n\r\ninterface ParamsTypes {\r\n  code: string\r\n}\r\n\r\nlet isMessageShown = false;\r\nlet yourChoice: number | null = null;\r\nlet opponentChoice: number | null = null;\r\nlet requestMessage = '';\r\nlet answerMessage = '';\r\nlet typeOfRequest = '';\r\n\r\nlet maxScore = 0;\r\nlet prevMaxScore = 0;\r\n// incoming max score\r\nlet acceptedMaxScore = 0;\r\n\r\nfunction Game(props: ContainerProps) {\r\n  const { code } = useParams<ParamsTypes>();\r\n\r\n  const buttonY = useRef<HTMLButtonElement>(null);\r\n  const buttonO = useRef<HTMLButtonElement>(null);\r\n  const images = useRef<Array<HTMLImageElement>>([]);\r\n  const messageInfo = useRef<HTMLDivElement>(null);\r\n  const newGameBtn = useRef<HTMLButtonElement>(null);\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const checkPlayingInfo = useRef((choice: string) => { });\r\n  const getSelectValue = useRef(() => { });\r\n  // eslint-disable-next-line no-unused-vars\r\n  const connectSocket = useRef((socket: any) => { });\r\n  // eslint-disable-next-line no-unused-vars\r\n  const disconnectSocket = useRef((socket: any) => { });\r\n\r\n  const [lineHeight, setLineHeight] = useState(0);\r\n  const [yourScore, setYourScore] = useState('0');\r\n  const [opponentScore, setOpponentScore] = useState('0');\r\n  const [showRequestMessage, setShowRequestMessage] = useState(false);\r\n  const [showAnswerMessage, setShowAnswerMessage] = useState(false);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  const yourScoreRef = useRef('0');\r\n  const opponentScoreRef = useRef('0');\r\n  yourScoreRef.current = yourScore;\r\n  opponentScoreRef.current = opponentScore;\r\n\r\n  const { children } = props;\r\n  const {\r\n    container, margin, playingInfo, selectDiv,\r\n  } = children;\r\n\r\n  const currentSocket = playingInfo === friendInfo ? friendSocket : strangerSocket;\r\n  const currentSocketRef = useRef<any>();\r\n  currentSocketRef.current = currentSocket;\r\n\r\n  const redirectLink = playingInfo === friendInfo ? '/play-with-friend' : '/play-with-stranger';\r\n  const redirectLinkRef = useRef<any>();\r\n  redirectLinkRef.current = redirectLink;\r\n\r\n  // get child nodes of messageInfo to show who won or lost\r\n  // eslint-disable-next-line no-undef\r\n  let messageInfoChildNodes: NodeListOf<ChildNode>;\r\n  // eslint-disable-next-line no-undef\r\n  let contentChildNodes: NodeListOf<ChildNode>;\r\n  // eslint-disable-next-line no-undef\r\n  let header: ChildNode;\r\n  // p for paragraph in content child nodes\r\n  // eslint-disable-next-line no-undef\r\n  let p: ChildNode;\r\n\r\n  const isAI = () => playingInfo === AIinfo;\r\n\r\n  const initMessageParams = () => {\r\n    if (messageInfo.current === null) return;\r\n    messageInfoChildNodes = messageInfo.current!!.childNodes;\r\n    contentChildNodes = messageInfoChildNodes[1].childNodes;\r\n    // eslint-disable-next-line prefer-destructuring\r\n    header = contentChildNodes[0];\r\n    // eslint-disable-next-line prefer-destructuring\r\n    p = contentChildNodes[1];\r\n  };\r\n\r\n  const restoreShowMessage = () => {\r\n    if (messageInfo.current === null) return;\r\n    if (!isMessageShown) initMessageParams();\r\n    isMessageShown = false;\r\n    header.textContent = 'Rock Paper Scissors';\r\n    if (isAI()) {\r\n      p.textContent = 'Waiting for you .....';\r\n    } else {\r\n      p.textContent = 'Waiting for opponent .....';\r\n    }\r\n\r\n    const i = document.createElement('i');\r\n    i.className = 'circle notched loading icon';\r\n    i.setAttribute('aria-hidden', 'true');\r\n    messageInfoChildNodes[0].replaceWith(i);\r\n\r\n    images.current.map((image: HTMLImageElement) => {\r\n      image.classList.remove('tranform-img');\r\n      return image;\r\n    });\r\n\r\n    yourChoice = null;\r\n    opponentChoice = null;\r\n  };\r\n\r\n  const handleRejectRequest = () => {\r\n    if (typeOfRequest === 'max-score') {\r\n      currentSocketRef.current.emit('reject changing max score', code);\r\n    } else if (typeOfRequest === 'new-game') {\r\n      currentSocketRef.current.emit('reject new game', code);\r\n    } else if (typeOfRequest === 'play-again') {\r\n      currentSocketRef.current.emit('reject play again', code);\r\n      setRedirect(true);\r\n    }\r\n    setShowRequestMessage(false);\r\n  };\r\n\r\n  const handleAcceptRequest = () => {\r\n    if (typeOfRequest === 'max-score') {\r\n      currentSocketRef.current.emit('accept changing max score', code);\r\n      maxScore = acceptedMaxScore;\r\n      prevMaxScore = maxScore;\r\n      (selectDiv!!.current!!.childNodes[1] as HTMLSelectElement)\r\n        .value = maxScore.toString();\r\n    } else if (typeOfRequest === 'new-game') {\r\n      currentSocketRef.current.emit('accept new game', code);\r\n    } else if (typeOfRequest === 'play-again') {\r\n      currentSocketRef.current.emit('accept play again', code);\r\n    }\r\n    setShowRequestMessage(false);\r\n    newGame(false);\r\n  };\r\n\r\n  const handleShowAnswer = () => {\r\n    setShowAnswerMessage(true);\r\n    let answerTimer = 0;\r\n    if (answerTimer) clearTimeout(answerTimer);\r\n    answerTimer = window.setTimeout(() => {\r\n      setShowAnswerMessage(false);\r\n      clearTimeout(answerTimer);\r\n    }, 2000);\r\n  };\r\n\r\n  const newGame = (isBtnPressed: boolean) => {\r\n    initMessageParams();\r\n    restoreShowMessage();\r\n    if (!isBtnPressed) {\r\n      setYourScore('0');\r\n      setOpponentScore('0');\r\n      if (newGameBtn.current === null) return;\r\n      newGameBtn.current!!.textContent = 'New Game';\r\n      return;\r\n    }\r\n\r\n    if (isAI()) {\r\n      setYourScore('0');\r\n      setOpponentScore('0');\r\n      if (newGameBtn.current === null) return;\r\n      newGameBtn.current!!.textContent = 'New Game';\r\n      return;\r\n    }\r\n\r\n    if (newGameBtn.current!!.textContent === 'New Game') {\r\n      answerMessage = 'Requesting opponent to start a new game';\r\n      currentSocketRef.current.emit('new game', code);\r\n      setShowAnswerMessage(true);\r\n    } else if (newGameBtn.current!!.textContent === 'Play Again?') {\r\n      answerMessage = 'Requesting opponent to play again';\r\n      currentSocketRef.current.emit('play again', code);\r\n      setShowAnswerMessage(true);\r\n    }\r\n  };\r\n\r\n  const showMessage = (\r\n    playerChoice: string,\r\n    headerMessage: string,\r\n    pMessage: string,\r\n    score: number,\r\n    winner: string,\r\n  ) => {\r\n    initMessageParams();\r\n    isMessageShown = true;\r\n\r\n    const i = document.createElement('i');\r\n    i.setAttribute('aria-hidden', 'true');\r\n\r\n    let messageTimer = 0;\r\n    if (messageTimer) clearTimeout(messageTimer);\r\n\r\n    if (score.toString() === maxScore.toString()) {\r\n      newGameBtn.current!!.textContent = 'Play Again?';\r\n\r\n      if (winner === 'player') {\r\n        header.textContent = 'You Won!';\r\n        p.textContent = `Yeeeeeeeeeeeee... ${headerMessage}`;\r\n\r\n        i.className = 'smile outline icon';\r\n        messageInfoChildNodes[0].replaceWith(i);\r\n      }\r\n\r\n      if (winner === 'opponent') {\r\n        header.textContent = 'You Lost :-(';\r\n        p.textContent = `oooh Noooooooo... ${headerMessage}`;\r\n\r\n        i.className = 'frown outline icon';\r\n        messageInfoChildNodes[0].replaceWith(i);\r\n      }\r\n    } else {\r\n      header.textContent = headerMessage;\r\n      p.textContent = pMessage;\r\n\r\n      i.className = `icon hand ${playerChoice.toLocaleLowerCase()} outline`;\r\n      messageInfoChildNodes[0].replaceWith(i);\r\n\r\n      messageTimer = window.setTimeout(() => {\r\n        restoreShowMessage();\r\n        clearTimeout(messageTimer);\r\n      }, 4000);\r\n    }\r\n  };\r\n\r\n  const chooseWinner = (playerOneChoice: number, playerTwoChoice: number) => {\r\n    const headerMessage = `Your opponent chose: ${readable[playerTwoChoice]}`;\r\n    let pMessage = '';\r\n\r\n    if (order[playerOneChoice] === order[playerTwoChoice]) {\r\n      pMessage = 'The game is tied';\r\n      showMessage(readable[playerTwoChoice], headerMessage, pMessage, 0, '');\r\n    } else if (order[playerOneChoice] === order[playerTwoChoice + 1]) {\r\n      pMessage = 'You won!';\r\n      const newScore = parseInt(yourScoreRef.current, 10) + 1;\r\n      showMessage(readable[playerTwoChoice], headerMessage, pMessage, newScore, 'player');\r\n      setYourScore(newScore.toString());\r\n    } else {\r\n      pMessage = 'You lost :(';\r\n      const newScore = parseInt(opponentScoreRef.current, 10) + 1;\r\n      showMessage(readable[playerTwoChoice], headerMessage, pMessage, newScore, 'opponent');\r\n      setOpponentScore(newScore.toString());\r\n    }\r\n  };\r\n\r\n  const checkForChoices = () => {\r\n    initMessageParams();\r\n    if (yourChoice === null && opponentChoice !== null) {\r\n      p.textContent = 'Waiting for you .....';\r\n    } else if (opponentChoice === null && yourChoice !== null) {\r\n      p.textContent = 'Waiting for opponent .....';\r\n    } else if (yourChoice !== null && opponentChoice !== null) {\r\n      chooseWinner(yourChoice as number, opponentChoice as number);\r\n    }\r\n  };\r\n\r\n  const eventNames = [\r\n    'opponent choice', 'change max score??', 'max score accepted',\r\n    'max score rejected', 'new game?', 'new game accepted', 'new game rejected',\r\n    'play again?', 'play again accepted', 'play again rejected',\r\n  ];\r\n\r\n  const acceptRequest = () => {\r\n    setShowAnswerMessage(false);\r\n    answerMessage = 'Your Opponent accepted';\r\n    handleShowAnswer();\r\n    newGame(false);\r\n  };\r\n\r\n  const rejectRequest = () => {\r\n    setShowAnswerMessage(false);\r\n    answerMessage = 'Your Opponent rejected';\r\n    handleShowAnswer();\r\n  };\r\n\r\n  connectSocket.current = (socket: any) => {\r\n    // o for opponent\r\n    // choices\r\n    socket.on(eventNames[0], (oChoice: string) => {\r\n      opponentChoice = parseInt(oChoice, 10);\r\n      checkForChoices();\r\n    });\r\n\r\n    // wants to change max score\r\n    socket.on(eventNames[1], (oMaxScore: number) => {\r\n      typeOfRequest = 'max-score';\r\n      acceptedMaxScore = oMaxScore;\r\n      requestMessage = `You opponent is requesting to change max score from ${maxScore} to ${oMaxScore}`;\r\n      setShowRequestMessage(true);\r\n    });\r\n\r\n    // max score accepted\r\n    socket.on(eventNames[2], () => {\r\n      prevMaxScore = maxScore;\r\n      acceptRequest();\r\n    });\r\n\r\n    // max score rejected\r\n    socket.on(eventNames[3], () => {\r\n      maxScore = prevMaxScore;\r\n      (selectDiv!!.current!!.childNodes[1] as HTMLSelectElement).value = prevMaxScore.toString();\r\n      rejectRequest();\r\n    });\r\n\r\n    // new game\r\n    socket.on(eventNames[4], () => {\r\n      typeOfRequest = 'new-game';\r\n      requestMessage = 'You opponent wants to start a new game';\r\n      setShowRequestMessage(true);\r\n    });\r\n\r\n    // accept new game\r\n    socket.on(eventNames[5], () => {\r\n      acceptRequest();\r\n    });\r\n\r\n    // reject new game\r\n    socket.on(eventNames[6], () => {\r\n      rejectRequest();\r\n    });\r\n\r\n    // play again\r\n    socket.on(eventNames[7], () => {\r\n      typeOfRequest = 'play-again';\r\n      requestMessage = 'You opponent wants to play again';\r\n      setShowRequestMessage(true);\r\n    });\r\n\r\n    // accept play again\r\n    socket.on(eventNames[8], () => {\r\n      acceptRequest();\r\n    });\r\n\r\n    // reject play again\r\n    // socket.on(eventNames[9], () => {\r\n    //   rejectRequest();\r\n    // });\r\n  };\r\n\r\n  disconnectSocket.current = (socket: any) => {\r\n    eventNames.map((eventName: string) => {\r\n      socket.off(eventName);\r\n      return '';\r\n    });\r\n  };\r\n\r\n  checkPlayingInfo.current = (choice: string) => {\r\n    if (yourChoice !== null) return;\r\n    if (parseInt(yourScoreRef.current, 10) === maxScore) return;\r\n    if (parseInt(opponentScoreRef.current, 10) === maxScore) return;\r\n    const choiceNo = choice as unknown as number;\r\n    images.current[choiceNo].classList.add('tranform-img');\r\n    if (isAI() && !isMessageShown) {\r\n      const CPUChoice = Math.floor(Math.random() * 3);\r\n      chooseWinner(choiceNo, CPUChoice);\r\n    } else if (!isMessageShown) {\r\n      yourChoice = parseInt(choice, 10);\r\n      checkForChoices();\r\n      currentSocketRef.current.emit('player choice', choice, code);\r\n    }\r\n  };\r\n\r\n  // get option menu value\r\n  getSelectValue.current = () => {\r\n    const select = selectDiv!!.current!!.childNodes[1];\r\n    (select as HTMLSelectElement).disabled = false;\r\n    maxScore = 3;\r\n    prevMaxScore = maxScore;\r\n    select.addEventListener('change', (e) => {\r\n      maxScore = (e.target as HTMLSelectElement).value as unknown as number;\r\n      if (isAI()) {\r\n        newGame(false);\r\n      } else {\r\n        answerMessage = `Requesting opponent to change max score from ${prevMaxScore} to ${maxScore}`;\r\n        currentSocketRef.current.emit('change max score?', maxScore, code);\r\n        setShowAnswerMessage(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // effect\r\n    const buttonYHeight = buttonY.current!!.clientHeight;\r\n    setLineHeight(buttonYHeight);\r\n    setYourScore('0');\r\n    setOpponentScore('0');\r\n    getSelectValue.current();\r\n\r\n    // copy images.current for \"react-hooks/exhaustive-deps\": \"warn\", rule\r\n    const imagesC = images.current;\r\n\r\n    imagesC.map((image: HTMLImageElement) => {\r\n      const choice = image.getAttribute('data-choice');\r\n      image.addEventListener('click', () => { checkPlayingInfo.current(choice!!); });\r\n      return image;\r\n    });\r\n\r\n    // open sockect\r\n    connectSocket.current(currentSocketRef.current);\r\n    yourChoice = null;\r\n    opponentChoice = null;\r\n    isMessageShown = false;\r\n\r\n    return () => {\r\n      // cleanup\r\n      disconnectSocket.current(currentSocketRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        marginTop: `${margin + 10}px`,\r\n        marginBottom: `${margin + 10}px`,\r\n      }}\r\n      ref={container}\r\n    >\r\n      {redirect && <Redirect to={redirectLinkRef.current} />}\r\n      <Row>\r\n        <Col />\r\n        <Col\r\n          lg={12}\r\n          md={12}\r\n          sm={12}\r\n          xl={12}\r\n          xs={12}\r\n        >\r\n\r\n          {/* scores */}\r\n          <div className=\"scores\">\r\n            <h5>Scores</h5>\r\n            <div className=\"ui buttons\" style={{ paddingTop: '25px' }}>\r\n              <br />\r\n              <button\r\n                ref={buttonY}\r\n                type=\"button\"\r\n                className=\"ui icon right labeled orange button button-y button-yo\"\r\n              >\r\n                <i\r\n                  aria-hidden=\"true\"\r\n                  className=\"icon\"\r\n                  style={{ lineHeight: `${lineHeight}px` }}\r\n                >\r\n                  {yourScoreRef.current}\r\n                </i>\r\n                You\r\n              </button>\r\n\r\n              <button\r\n                ref={buttonO}\r\n                type=\"button\"\r\n                className=\"ui icon left labeled orange button button-o button-yo\"\r\n              >\r\n                <i\r\n                  aria-hidden=\"true\"\r\n                  className=\"icon\"\r\n                  style={{ lineHeight: `${lineHeight}px` }}\r\n                >\r\n                  {opponentScoreRef.current}\r\n                </i>\r\n                Opponent\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* heading */}\r\n          <Row>\r\n            <Col />\r\n            <Col\r\n              lg={12}\r\n              md={12}\r\n              sm={12}\r\n              xl={12}\r\n              xs={12}\r\n            >\r\n              <h5 style={{ textAlign: 'center' }}>Choose Your Weapon Of Destruction.</h5>\r\n            </Col>\r\n            <Col />\r\n          </Row>\r\n\r\n          {/* rock paper scissors */}\r\n          <Row className=\"rps-container\" style={{ maxWidth: '550px', margin: '0 auto' }}>\r\n            <Col\r\n              lg={4}\r\n              md={4}\r\n              sm={4}\r\n              xl={4}\r\n              xs={4}\r\n              className=\"rps\"\r\n            >\r\n              <img\r\n                ref={(element: HTMLImageElement) => { images.current[0] = element; }}\r\n                src={rock}\r\n                alt=\"rock\"\r\n                data-choice={choices.rock}\r\n              />\r\n              <p>Rock</p>\r\n            </Col>\r\n\r\n            <Col\r\n              lg={4}\r\n              md={4}\r\n              sm={4}\r\n              xl={4}\r\n              xs={4}\r\n              className=\"rps\"\r\n            >\r\n              <img\r\n                ref={(element: HTMLImageElement) => { images.current[1] = element; }}\r\n                src={paper}\r\n                alt=\"paper\"\r\n                data-choice={choices.paper}\r\n              />\r\n              <p>Paper</p>\r\n            </Col>\r\n\r\n            <Col\r\n              lg={4}\r\n              md={4}\r\n              sm={4}\r\n              xl={4}\r\n              xs={4}\r\n              className=\"rps\"\r\n            >\r\n              <img\r\n                ref={(element: HTMLImageElement) => { images.current[2] = element; }}\r\n                src={scissors}\r\n                alt=\"scissors\"\r\n                data-choice={choices.scissors}\r\n              />\r\n              <p>Scissors</p>\r\n            </Col>\r\n          </Row>\r\n\r\n          {/* message */}\r\n          <div ref={messageInfo} className=\"ui icon large message message-info\">\r\n            <i aria-hidden=\"true\" className=\"circle notched loading icon\" />\r\n            <div className=\"content\">\r\n              <div className=\"header\">Rock Paper Scissors</div>\r\n              <p style={{ color: '#000', fontWeight: 'bold' }}>\r\n                {isAI() ? 'Waiting for you .....' : 'Waiting for opponent .....'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* new game btn */}\r\n          <div className=\"new-game \">\r\n            <button\r\n              ref={newGameBtn}\r\n              onClick={() => { newGame(true); }}\r\n              className=\"ui button orange\"\r\n              type=\"button\"\r\n            >\r\n              New Game\r\n            </button>\r\n          </div>\r\n\r\n          {/* playing-info */}\r\n          <Message size=\"large\" className=\"playing-info\">\r\n            You are playing with\r\n            {` ${playingInfo.info}`}\r\n          </Message>\r\n\r\n        </Col>\r\n        <Col />\r\n      </Row>\r\n\r\n      {/* modal for request */}\r\n      <Modal\r\n        show={showRequestMessage}\r\n        animation={false}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>R.P.S</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{requestMessage}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleRejectRequest}>\r\n            Reject\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleAcceptRequest}>\r\n            Accept\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={showAnswerMessage}\r\n        animation={false}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>R.P.S</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{answerMessage}</Modal.Body>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import { RefObject } from 'react';\r\n\r\n// Enter game code to join game\r\nexport const enterGameCode = (\r\n  gameCodeI: RefObject<HTMLInputElement> | null,\r\n  enterGameB: RefObject<HTMLButtonElement> | null,\r\n  // eslint-disable-next-line no-unused-vars\r\n  createJoinGame: (arrRef: any[], type: string | null) => void,\r\n  errorMessageCodeP: RefObject<HTMLParagraphElement> | null,\r\n) => (\r\n  <>\r\n    <p>Enter Game Code To Join a Game</p>\r\n    <div className=\"ui input small\">\r\n      <input\r\n        ref={gameCodeI}\r\n        type=\"text\"\r\n        placeholder=\"Enter Game Code .....\"\r\n        maxLength={40}\r\n        minLength={3}\r\n      />\r\n    </div>\r\n\r\n    <button\r\n      ref={enterGameB}\r\n      type=\"button\"\r\n      className=\"small ui orange button\"\r\n      onClick={() => createJoinGame([gameCodeI, enterGameB, errorMessageCodeP], '')}\r\n    >\r\n      Enter Game\r\n    </button>\r\n    <p ref={errorMessageCodeP} />\r\n  </>\r\n);\r\n\r\n//  join game section\r\nexport const joinGame = (selectFilter: RefObject<HTMLSelectElement> | null) => (\r\n  <>\r\n    <h4 className=\"ui header\">\r\n      Join Game\r\n    </h4>\r\n    <select\r\n      ref={selectFilter}\r\n      style={{ padding: '5px 5px' }}\r\n      name=\"max_score_filter\"\r\n      className=\"ui selection dropdown select-max-score\"\r\n      defaultValue=\"all\"\r\n    >\r\n      <option key=\"all\" value=\"all\">All</option>\r\n      <option key=\"3\" value=\"3\">3</option>\r\n      <option key=\"5\" value=\"5\">5</option>\r\n    </select>\r\n    <span style={{ paddingLeft: '15px' }}>Select Max Score</span>\r\n  </>\r\n);\r\n\r\nexport const loadingTableRow = (\r\n  <tr>\r\n    <td colSpan={2}>\r\n      <h5>Loading .....</h5>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport const serverErrorTableRow = (\r\n  <tr>\r\n    <td colSpan={2}>\r\n      <h5>500 Internal Server Error</h5>\r\n      Oops, something went wrong. Reconnecting .....\r\n      <p>\r\n        The server encountered an internal error or\r\n        misconfiguration and was unable to complete your request\r\n      </p>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport const noAvailableGamesTableRow = (\r\n  <tr>\r\n    <td colSpan={2}>\r\n      <h6>No Games</h6>\r\n      Create one?\r\n    </td>\r\n  </tr>\r\n);\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { CreateOrJoinGameProps } from '../helperFunctions/Props';\r\nimport './CreateOrJoinGame.css';\r\nimport GameType, { friendInfo, strangerInfo } from '../helperFunctions/GameInfo';\r\nimport {\r\n  enterGameCode, joinGame, loadingTableRow,\r\n  serverErrorTableRow, noAvailableGamesTableRow,\r\n} from '../ui/CreateOrJoinGameUI';\r\nimport { friendSocket, strangerSocket } from '../helperFunctions/SocketIO';\r\n\r\nconst FRIEND_LINK = '/play-with-friend';\r\nconst STRANGER_LINK = '/play-with-stranger';\r\nlet friendStrangerLink = '';\r\nlet gameCode = '';\r\nlet isComponentMounted = false;\r\n\r\nfunction CreateOrJoinGame(props: CreateOrJoinGameProps) {\r\n  const { children } = props;\r\n  const { playingInfo, selectDiv } = children;\r\n  const playingInfoRef = useRef<GameType>({ code: -1, info: '' });\r\n  playingInfoRef.current = playingInfo;\r\n\r\n  const gameNameI = useRef<HTMLInputElement>(null);\r\n  const createGameB = useRef<HTMLButtonElement>(null);\r\n  const errorMessageP = useRef<HTMLParagraphElement>(null);\r\n  const gameCodeI = useRef<HTMLInputElement>(null);\r\n  const enterGameB = useRef<HTMLButtonElement>(null);\r\n  const errorMessageCodeP = useRef<HTMLParagraphElement>(null);\r\n  const selectMaxScore = useRef<HTMLSelectElement>(null);\r\n  const selectFilter = useRef<HTMLSelectElement>(null);\r\n  const filterValue = useRef('');\r\n  const filteredItemsNumber = useRef(0);\r\n\r\n  const isPlayingInfoEqualFriendInfo = useRef((): boolean => true);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const connectSocket = useRef((socket: any) => { });\r\n\r\n  const strangerSocketRef = useRef(() => { });\r\n  const friendSocketRef = useRef(() => { });\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [serverError, setServerError] = useState(false);\r\n  const [availableGames, setAvailableGames] = useState(0);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [roomsArr, setRoomsArr] = useState([]);\r\n\r\n  const availableGamesRef = useRef(0);\r\n  availableGamesRef.current = availableGames;\r\n\r\n  const roomsArrRef = useRef([]);\r\n  roomsArrRef.current = roomsArr;\r\n\r\n  isPlayingInfoEqualFriendInfo.current = () => playingInfo === friendInfo;\r\n\r\n  const createJoinGame = (arrRef: any[], type: string | null = null) => {\r\n    /**\r\n     * ref order\r\n     * input -> button -> error paragraph\r\n     *\r\n     * type is if button is for creating new game or joining a game\r\n     *\r\n     */\r\n    const nameInput = arrRef[0];\r\n    const buttonB = arrRef[1];\r\n    const errorParagraph = arrRef[2];\r\n\r\n    nameInput.current!!.parentElement!!.classList.add('disabled');\r\n    buttonB.current!!.classList.add('disabled');\r\n    errorParagraph.current!!.textContent = 'Loading .....';\r\n    const name = nameInput.current!!.value;\r\n    const nameNoSpace = name.replace(/\\s/g, '');\r\n\r\n    const maxScore = selectMaxScore.current!!.value;\r\n    if (nameNoSpace.length < 3 || nameNoSpace.length > 40) {\r\n      nameInput.current!!.parentElement!!.classList.remove('disabled');\r\n      buttonB.current!!.classList.remove('disabled');\r\n      errorParagraph.current!!.textContent = 'Error! Name/ Code must be between 3 and 40 characters';\r\n      return;\r\n    }\r\n\r\n    if (type != null && nameNoSpace.substr(nameNoSpace.length - 3) === '-s-') {\r\n      friendStrangerLink = `${STRANGER_LINK}/${nameNoSpace}`;\r\n      setRedirect(true);\r\n      return;\r\n    }\r\n\r\n    if (type != null) {\r\n      gameCode = nameNoSpace;\r\n      friendStrangerLink = `${FRIEND_LINK}/${gameCode}`;\r\n      setRedirect(true);\r\n      return;\r\n    }\r\n\r\n    if (isPlayingInfoEqualFriendInfo.current()) {\r\n      nameInput.current!!.parentElement!!.classList.remove('disabled');\r\n      buttonB.current!!.classList.remove('disabled');\r\n      errorParagraph.current!!.textContent = '';\r\n      gameCode = btoa(nameNoSpace);\r\n      if (gameCode.length > 5) {\r\n        gameCode = gameCode.slice(gameCode.length - 5, gameCode.length);\r\n      }\r\n\r\n      friendSocket.emit('create friend room', `${maxScore}-max-score-${name}-rps-${gameCode}-f-`);\r\n      friendStrangerLink = `${FRIEND_LINK}/${gameCode}-f-`;\r\n      friendSocket.on('room already exists', () => {\r\n        errorParagraph.current!!.textContent = 'err. Name already taken :-(';\r\n      });\r\n      friendSocket.on('creating room', () => {\r\n        setRedirect(true);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!isPlayingInfoEqualFriendInfo.current()) {\r\n      nameInput.current!!.parentElement!!.classList.remove('disabled');\r\n      buttonB.current!!.classList.remove('disabled');\r\n      errorParagraph.current!!.textContent = '';\r\n\r\n      gameCode = btoa(nameNoSpace);\r\n      if (gameCode.length > 5) {\r\n        gameCode = gameCode.slice(gameCode.length - 5, gameCode.length);\r\n      }\r\n\r\n      strangerSocket.emit('create stranger room', `${maxScore}-max-score-${name}-rps-${gameCode}-s-`);\r\n      friendStrangerLink = `${STRANGER_LINK}/${gameCode}-s-`;\r\n      strangerSocket.on('room already exists st', () => {\r\n        errorParagraph.current!!.textContent = 'err. Name already taken :-(';\r\n      });\r\n      strangerSocket.on('creating stranger room', () => {\r\n        strangerSocket.emit('get rooms');\r\n        setRedirect(true);\r\n      });\r\n    } else {\r\n      nameInput.current!!.parentElement!!.classList.remove('disabled');\r\n      buttonB.current!!.classList.remove('disabled');\r\n      errorParagraph.current!!.textContent = 'Server Error! Try again';\r\n    }\r\n  };\r\n\r\n  const joinGameOnClick = (code: string) => {\r\n    friendStrangerLink = `${STRANGER_LINK}/${code}`;\r\n    setRedirect(true);\r\n  };\r\n\r\n  connectSocket.current = (socket: any) => {\r\n    isComponentMounted = true;\r\n    socket.on('connect', () => {\r\n      if (!isComponentMounted) return;\r\n      setServerError(false);\r\n      if (!isPlayingInfoEqualFriendInfo.current()) setAvailableGames(0);\r\n      setIsLoading(false);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      if (!isComponentMounted) return;\r\n      setServerError(true);\r\n      setIsLoading(false);\r\n    });\r\n\r\n    socket.io.on('error', () => {\r\n      if (!isComponentMounted) return;\r\n      setServerError(true);\r\n      setIsLoading(false);\r\n    });\r\n\r\n    if (socket.connected) {\r\n      setServerError(false);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const disconnectSocket = (info: GameType) => {\r\n    switch (info) {\r\n      case friendInfo:\r\n        friendSocket.off('connect');\r\n        friendSocket.off('disconnect');\r\n        friendSocket.io.off('error');\r\n        friendSocket.off();\r\n        break;\r\n      case strangerInfo:\r\n        strangerSocket.off('connect');\r\n        strangerSocket.off('disconnect');\r\n        strangerSocket.io.off('error');\r\n        strangerSocket.off();\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  friendSocketRef.current = () => {\r\n    if (!isPlayingInfoEqualFriendInfo.current()) return;\r\n    connectSocket.current(friendSocket);\r\n  };\r\n\r\n  strangerSocketRef.current = () => {\r\n    if (isPlayingInfoEqualFriendInfo.current()) return;\r\n    connectSocket.current(strangerSocket);\r\n    strangerSocket.emit('get rooms');\r\n    strangerSocket.on('rooms map', (rooms: any) => {\r\n      filteredItemsNumber.current = 0;\r\n      setRoomsArr(rooms);\r\n      setAvailableGames(rooms.length);\r\n    });\r\n\r\n    filterValue.current = selectFilter.current!!.value;\r\n    selectFilter.current!!.addEventListener('change', (e) => {\r\n      filterValue.current = (e.target as HTMLSelectElement).value;\r\n      const newRoomArr = [...roomsArrRef.current];\r\n      filteredItemsNumber.current = 0;\r\n      setRoomsArr(newRoomArr);\r\n    });\r\n  };\r\n\r\n  const availableGamesTableRow = (\r\n    <>\r\n      {\r\n        roomsArrRef.current.map((room: any, idx: number) => {\r\n          const code = room[0];\r\n          const maxScore = room[1].split('-max-score-')[0];\r\n          const name = room[1].split('-max-score-')[1];\r\n          if (filterValue.current !== 'all' && maxScore !== filterValue.current) {\r\n            if (filteredItemsNumber.current === 0) availableGamesRef.current = 0;\r\n            return;\r\n          }\r\n          filteredItemsNumber.current = 1;\r\n          // eslint-disable-next-line consistent-return\r\n          return (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <tr key={idx}>\r\n              <td>{name}</td>\r\n              <td>{`MAX SCORE: ${maxScore}`}</td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ui mini orange button\"\r\n                  onClick={() => joinGameOnClick(code)}\r\n                >\r\n                  Join Game\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })\r\n      }\r\n    </>\r\n  );\r\n\r\n  useEffect(() => {\r\n    // effect\r\n    (selectDiv!!.current!!.childNodes[1] as HTMLSelectElement).disabled = true;\r\n    friendSocketRef.current();\r\n    strangerSocketRef.current();\r\n\r\n    return () => {\r\n      // cleanup\r\n      disconnectSocket(playingInfoRef.current);\r\n      isComponentMounted = false;\r\n    };\r\n  }, [selectDiv]);\r\n\r\n  return (\r\n    <>\r\n      {/* redirect to playing zone */}\r\n      {redirect ? <Redirect push to={friendStrangerLink} /> : ''}\r\n      {/* create or join game input */}\r\n      <div className=\"ui center aligned basic segment join-game background\">\r\n        <p>Create A Game</p>\r\n        <div style={{ paddingBottom: '15px' }}>\r\n          <select\r\n            ref={selectMaxScore}\r\n            style={{ padding: '5px 5px' }}\r\n            name=\"select_max_score\"\r\n            className=\"ui selection dropdown select-max-score\"\r\n            defaultValue=\"3\"\r\n          >\r\n            <option key=\"3\" value=\"3\">3</option>\r\n            <option key=\"5\" value=\"5\">5</option>\r\n          </select>\r\n          <span style={{ paddingLeft: '15px' }}>Select Max Score</span>\r\n        </div>\r\n        <div className=\"ui input small\">\r\n          <input\r\n            ref={gameNameI}\r\n            type=\"text\"\r\n            placeholder=\"Enter Game Name .....\"\r\n            maxLength={40}\r\n            minLength={3}\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          ref={createGameB}\r\n          type=\"button\"\r\n          className=\"small ui orange button\"\r\n          onClick={() => createJoinGame([gameNameI, createGameB, errorMessageP])}\r\n        >\r\n          Create Game\r\n        </button>\r\n        <p ref={errorMessageP} />\r\n\r\n        <div className=\"ui horizontal divider\">\r\n          Or\r\n        </div>\r\n\r\n        {\r\n          isPlayingInfoEqualFriendInfo.current()\r\n          && enterGameCode(gameCodeI, enterGameB, createJoinGame, errorMessageCodeP)\r\n        }\r\n        {!isPlayingInfoEqualFriendInfo.current() && joinGame(selectFilter)}\r\n      </div>\r\n\r\n      {/* game info */}\r\n      <div className=\"games\">\r\n        <table className=\"table table-bordered\">\r\n          <tbody>\r\n            {/* check if page is loading and show loading words */}\r\n            {isLoading && loadingTableRow}\r\n\r\n            {/* check for server error and show error if unable to connect to server */}\r\n            {serverError && serverErrorTableRow}\r\n\r\n            {/* only if playing info is strangerInfo */}\r\n            {\r\n              !isPlayingInfoEqualFriendInfo.current()\r\n              && !isLoading\r\n              && !serverError\r\n              && availableGamesRef.current <= 0\r\n              && noAvailableGamesTableRow\r\n            }\r\n            {\r\n              !isPlayingInfoEqualFriendInfo.current()\r\n              && !isLoading\r\n              && !serverError\r\n              && availableGamesRef.current > 0\r\n              && availableGamesTableRow\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateOrJoinGame;\r\n","import { Container, Row, Col } from 'react-bootstrap';\r\nimport { ContainerProps } from '../helperFunctions/Props';\r\nimport CreateOrJoinGame from './CreateOrJoinGame';\r\nimport { friendInfo } from '../helperFunctions/GameInfo';\r\n\r\nfunction Friend(props: ContainerProps) {\r\n  const { children } = props;\r\n  const { margin, selectDiv } = children;\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        marginTop: `${margin + 10}px`,\r\n        marginBottom: `${margin + 10}px`,\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col />\r\n        <Col\r\n          lg={12}\r\n          md={12}\r\n          sm={12}\r\n          xl={12}\r\n          xs={12}\r\n        >\r\n          <CreateOrJoinGame>{{ playingInfo: friendInfo, selectDiv }}</CreateOrJoinGame>\r\n        </Col>\r\n        <Col />\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Friend;\r\n","import { Container, Row, Col } from 'react-bootstrap';\r\nimport { ContainerProps } from '../helperFunctions/Props';\r\nimport CreateOrJoinGame from './CreateOrJoinGame';\r\nimport { strangerInfo } from '../helperFunctions/GameInfo';\r\n\r\nfunction Stranger(props: ContainerProps) {\r\n  const { children } = props;\r\n  const { margin, selectDiv } = children;\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        marginTop: `${margin + 10}px`,\r\n        marginBottom: `${margin + 10}px`,\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col />\r\n        <Col\r\n          lg={12}\r\n          md={12}\r\n          sm={12}\r\n          xl={12}\r\n          xs={12}\r\n        >\r\n          <CreateOrJoinGame>{{ playingInfo: strangerInfo, selectDiv }}</CreateOrJoinGame>\r\n        </Col>\r\n        <Col />\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Stranger;\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { ContainerProps } from '../helperFunctions/Props';\r\nimport { loadingTableRow, serverErrorTableRow } from '../ui/CreateOrJoinGameUI';\r\nimport { friendSocket, strangerSocket } from '../helperFunctions/SocketIO';\r\nimport Game from './Game';\r\nimport GameType, { friendInfo, strangerInfo } from '../helperFunctions/GameInfo';\r\n\r\n/**\r\n * code will have -f- for friend and -s- for stranger\r\n */\r\n\r\ninterface ParamsTypes {\r\n  code: string\r\n}\r\n\r\nconst errorTableRow = (\r\n  <tr>\r\n    <td colSpan={2}>\r\n      <h5>Invalid Game Code/or Room is Full. 2 players only</h5>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nlet playingInfo: GameType = { code: -1, info: '' };\r\n\r\nfunction PlayOnline(props: ContainerProps) {\r\n  const { code } = useParams<ParamsTypes>();\r\n  // const { code } = useParams<Record<string, string | undefined>>();\r\n  const codeRef = useRef<string>('');\r\n  codeRef.current = code;\r\n\r\n  const { children } = props;\r\n  const { container, margin, selectDiv } = children;\r\n\r\n  const refInput = useRef<HTMLInputElement>(null);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [serverError, setServerError] = useState(false);\r\n  const [startGame, setStartGame] = useState(false);\r\n  const [showCopyToClipboard, setShowCopyToClipboard] = useState(false);\r\n  const [showYourOpponentLeft, setShowYourOpponentLeft] = useState(false);\r\n\r\n  const checkCodeAndConnectToSocket = useRef(() => { });\r\n  // eslint-disable-next-line no-unused-vars\r\n  const connectSocket = useRef((socket: any) => { });\r\n\r\n  const updateState = (\r\n    isLoading_: boolean,\r\n    error_: boolean,\r\n    serverError_: boolean,\r\n    startGame_: boolean,\r\n    showCopyToClipboard_: boolean,\r\n    showYourOpponentLeft_: boolean,\r\n  ) => {\r\n    setIsLoading(isLoading_);\r\n    setError(error_);\r\n    setServerError(serverError_);\r\n    setStartGame(startGame_);\r\n    setShowCopyToClipboard(showCopyToClipboard_);\r\n    setShowYourOpponentLeft(showYourOpponentLeft_);\r\n  };\r\n\r\n  const doesRoomExists = (socket: any) => {\r\n    socket.emit('does room exists', code);\r\n    setIsLoading(true);\r\n  };\r\n\r\n  connectSocket.current = (socket: any) => {\r\n    let isDisconnectedOrError = false;\r\n\r\n    socket.on('connect', () => {\r\n      updateState(false, false, false, false, false, false);\r\n      if (isDisconnectedOrError) doesRoomExists(socket);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      isDisconnectedOrError = true;\r\n      updateState(false, false, true, false, false, false);\r\n    });\r\n\r\n    socket.io.on('error', () => {\r\n      isDisconnectedOrError = true;\r\n      updateState(false, false, true, false, false, false);\r\n    });\r\n\r\n    if (socket.connected) {\r\n      isDisconnectedOrError = false;\r\n      updateState(false, false, false, false, false, false);\r\n    }\r\n  };\r\n\r\n  const disconnectSocket = (codeString: string) => {\r\n    switch (codeString) {\r\n      case '-f-':\r\n        friendSocket.off('connect');\r\n        friendSocket.off('disconnect');\r\n        friendSocket.io.off('error');\r\n        friendSocket.off();\r\n        break;\r\n      case '-s-':\r\n        strangerSocket.off('connect');\r\n        strangerSocket.off('disconnect');\r\n        strangerSocket.io.off('error');\r\n        strangerSocket.off();\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  const connectToAllSockets = (socket: any) => {\r\n    connectSocket.current(socket);\r\n    // check if a room exists\r\n    doesRoomExists(socket);\r\n    socket.on('room doesn\\'t exist', () => {\r\n      updateState(false, true, false, false, false, false);\r\n    });\r\n\r\n    // check number of playes in a room\r\n    socket.on('room is full', () => {\r\n      updateState(false, true, false, false, false, false);\r\n    });\r\n\r\n    // wait for two participants\r\n    socket.on('wait for oppenent', () => {\r\n      updateState(false, false, false, false, true, false);\r\n    });\r\n\r\n    // players are full\r\n    socket.on('start game', (maxScore: number) => {\r\n      updateState(false, false, false, true, false, false);\r\n      (selectDiv!!.current!!.childNodes[1] as HTMLSelectElement).value = maxScore.toString();\r\n      (selectDiv!!.current!!.childNodes[1] as HTMLSelectElement).disabled = false;\r\n    });\r\n\r\n    // an opponent left\r\n    socket.on('player left', () => {\r\n      updateState(false, false, false, false, false, true);\r\n      (selectDiv!!.current!!.childNodes[1] as HTMLSelectElement).disabled = true;\r\n    });\r\n  };\r\n\r\n  checkCodeAndConnectToSocket.current = () => {\r\n    const validCode = code.substr(code.length - 3);\r\n    if (validCode === '-f-') {\r\n      playingInfo = friendInfo;\r\n      connectToAllSockets(friendSocket);\r\n    } else if (validCode === '-s-') {\r\n      playingInfo = strangerInfo;\r\n      connectToAllSockets(strangerSocket);\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const copyToClipBoard = () => {\r\n    // select the input\r\n    refInput.current!!.select();\r\n    refInput.current!!.setSelectionRange(0, 99999); // for mobile\r\n\r\n    // copy the text\r\n    document.execCommand('copy');\r\n  };\r\n\r\n  const waitForPlayer = (\r\n    <tr>\r\n      <td colSpan={2}>\r\n        <p>\r\n          {/* Share the code with a friend */}\r\n          {\r\n            playingInfo === strangerInfo\r\n              ? 'Waiting for connection or share the code'\r\n              : 'Share the code with a friend'\r\n          }\r\n        </p>\r\n        <div className=\"ui action input\">\r\n          <input ref={refInput} type=\"text\" value={code} readOnly />\r\n          <button type=\"button\" className=\"ui teal right labeled icon button\" onClick={copyToClipBoard}>\r\n            <i className=\"copy icon\" />\r\n            Copy\r\n          </button>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n\r\n  const playerLeft = (\r\n    <tr>\r\n      <td colSpan={2}>\r\n        <p>\r\n          {/* Your oppenent Left :-(. Share code with friend */}\r\n          {\r\n            playingInfo === strangerInfo\r\n              ? 'Your oppenent Left :-(. Waiting for connection or share the code'\r\n              : 'Your oppenent Left :-(. Share code with friend'\r\n          }\r\n        </p>\r\n        <div className=\"ui action input\">\r\n          <input ref={refInput} type=\"text\" value={code} readOnly />\r\n          <button type=\"button\" className=\"ui teal right labeled icon button\" onClick={copyToClipBoard}>\r\n            <i className=\"copy icon\" />\r\n            Copy\r\n          </button>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n\r\n  const playOnlineUI = (\r\n    <Container\r\n      style={{\r\n        marginTop: `${margin + 10}px`,\r\n        marginBottom: `${margin + 10}px`,\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col />\r\n        <Col\r\n          lg={12}\r\n          md={12}\r\n          sm={12}\r\n          xl={12}\r\n          xs={12}\r\n        >\r\n          <div className=\"games\">\r\n            <table className=\"table table-bordered\">\r\n              <tbody>\r\n                {showCopyToClipboard && waitForPlayer}\r\n                {isLoading && loadingTableRow}\r\n                {error && errorTableRow}\r\n                {serverError && serverErrorTableRow}\r\n                {showYourOpponentLeft && playerLeft}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Col>\r\n        <Col />\r\n      </Row>\r\n    </Container>\r\n  );\r\n\r\n  useEffect(() => {\r\n    // effect\r\n    checkCodeAndConnectToSocket.current();\r\n    return () => {\r\n      // cleanup\r\n      disconnectSocket(codeRef.current.substr(codeRef.current.length - 3));\r\n      friendSocket.emit('player leaving');\r\n      strangerSocket.emit('player leaving');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !startGame ? playOnlineUI\r\n          : (\r\n            <Game>\r\n              {{\r\n                container, margin, playingInfo, selectDiv,\r\n              }}\r\n            </Game>\r\n          )\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PlayOnline;\r\n","import { useRef, useEffect, useState } from 'react';\r\n// import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport TopNav from './ui/TopNav';\r\nimport BottomNav from './ui/BottomNav';\r\nimport Game from './components/Game';\r\nimport Friend from './components/Friend';\r\nimport Stranger from './components/Stranger';\r\nimport PlayOnline from './components/PlayOnline';\r\nimport { AIinfo } from './helperFunctions/GameInfo';\r\n\r\nconst debounce = (callback: () => void, time: number = 305) => {\r\n  let debounceTimer = 0;\r\n  return () => {\r\n    if (debounceTimer) clearTimeout(debounceTimer);\r\n    debounceTimer = window.setTimeout(callback, time);\r\n  };\r\n};\r\n\r\nconst playingInfo = AIinfo;\r\n\r\nfunction App() {\r\n  const topNav = useRef<HTMLDivElement>(null);\r\n  const bottomNav = useRef<HTMLDivElement>(null);\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const selectDiv = useRef<HTMLDivElement>(null);\r\n\r\n  const [margin, setMargin] = useState(0);\r\n\r\n  // get height of top and bottom nav\r\n  const topBottomHeight = () => {\r\n    const topNavHeight = topNav.current!!.clientHeight;\r\n    setMargin(topNavHeight);\r\n  };\r\n\r\n  useEffect(() => {\r\n    topBottomHeight();\r\n    // effect\r\n    window.addEventListener('resize', debounce(topBottomHeight));\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', debounce(topBottomHeight));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n\r\n      <div>\r\n        <TopNav>{{ nav: topNav, selectDiv }}</TopNav>\r\n        <BottomNav>\r\n          {{ nav: bottomNav, selectDiv: null }}\r\n        </BottomNav>\r\n      </div>\r\n\r\n      <Switch>\r\n\r\n        <Route exact path=\"/\">\r\n          <Game>\r\n            {{\r\n              container, margin, playingInfo, selectDiv,\r\n            }}\r\n          </Game>\r\n        </Route>\r\n\r\n        <Route exact path=\"/play-with-friend\">\r\n          <Friend>\r\n            {{\r\n              container, margin, playingInfo, selectDiv,\r\n            }}\r\n          </Friend>\r\n        </Route>\r\n\r\n        <Route exact path=\"/play-with-stranger\">\r\n          <Stranger>\r\n            {{\r\n              container, margin, playingInfo, selectDiv,\r\n            }}\r\n          </Stranger>\r\n        </Route>\r\n\r\n        <Route exact path=\"/play-with-friend/:code\">\r\n          <PlayOnline>\r\n            {{\r\n              container, margin, playingInfo, selectDiv,\r\n            }}\r\n          </PlayOnline>\r\n        </Route>\r\n\r\n        <Route exact path=\"/play-with-stranger/:code\">\r\n          <PlayOnline>\r\n            {{\r\n              container, margin, playingInfo, selectDiv,\r\n            }}\r\n          </PlayOnline>\r\n        </Route>\r\n\r\n      </Switch>\r\n\r\n      <div className=\"error-div\">Use Screen of 320px and above</div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}